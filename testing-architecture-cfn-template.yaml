# TODO: Setup an IGW w/the public subnet
# TODO: Setup instances within created VPC/subnets
# TODO: Split file into multiple (Have one for networking, another for instances, etc.)
# TODO: Have option to name resources thru parameters?
AWSTemplateFormatVersion: 2010-09-09
Description: A YAML template file made by Ishaan Sharma.

# Parameters section
Parameters:
  EC2InstanceCreation:
    Description: Should EC2 instances and related components (SGs, etc.) be made?
    Type: String
    AllowedValues:
      - true
      - false
    Default: false

# Resources section
Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: vpc-us-east-1-cfn-testing-stack
  MyPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      # Gets the first AZ in the current region 
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.0.0/24
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: public-subnet-a
  MyPrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      # Gets the first AZ in the current region (Same as public subnet)
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.16.0/20
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: private-subnet-a
  MyPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: public-route-table
  MyPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: private-route-table
  MyIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: igw-cfn-template
  MyPrivateSubnetAssociatedWithPrivateRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MyPrivateRouteTable
      SubnetId: !Ref MyPrivateSubnet
  MyPublicSubnetAssociatedWithPublicRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MyPublicRouteTable
      SubnetId: !Ref MyPublicSubnet
  MyIGWAssociatedWithVPC:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref MyIGW
      VpcId: !Ref MyVPC
  # Creates a route for anyone connecting to the VPC to be directed thru the IGW to the public subnet
  MyIGWRouteToPublicSubnet:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyIGW
      RouteTableId: !Ref MyPublicRouteTable
      






  # TODO: Create an ALB and target group (DO NOT add instances to target group)
  # TODO: Create an ASG and associate it with the target group
  MyInstance:
    Type: AWS::EC2::Instance
    Condition: IsInstancesMade
    Properties:
      ImageId: ami-0c614dee691cbbf37
      InstanceType: t2.micro
      SecurityGroups: 
          - !Ref MySecurityGroup
      Tags: 
        - Key: Name 
          Value: TestInstance
  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: IsInstancesMade
    Properties:
      GroupDescription: Security group made for the instance thru CFN.
      GroupName: launch-wizard-cfn
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

# Conditions section
Conditions:
    IsInstancesMade: !Equals [!Ref EC2InstanceCreation, true]