# TODO: Setup parameters to allow for specific connections?
# TODO: Create parameter to set min/max/desired number of instances
# TODO: Create an ALB and target group (DO NOT add instances to target group)
# TODO: Split file into multiple (Have one for networking, another for instances, etc.)
AWSTemplateFormatVersion: 2010-09-09
Description: A YAML template file made by Ishaan Sharma.

# Parameters section
Parameters:
  EC2InstanceCreation:
    Description: Should EC2 instances and related components (SGs, etc.) be made?
    Type: String
    AllowedValues:
      - true
      - false
    Default: false
  # By default the ASG will use instances of the latest amazon linux
  LatestAMIId: 
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: "/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64"

# Resources section
Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: vpc-us-east-1-cfn-testing-stack
  MyPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      # Gets the first AZ in the current region 
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: public-subnet-a
  MyPrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      # Gets the first AZ in the current region (Same as public subnet)
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.16.0/20
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: private-subnet-a
  MyPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: public-route-table
  MyPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: private-route-table
  MyNACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: nacl-route-table
  # Allows for SSH connection into subnet
  MyNACLSSHInboundEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Egress: false
      CidrBlock: 0.0.0.0/0
      NetworkAclId: !Ref MyNACL
      PortRange:
        From: 22
        To: 22
      Protocol: 6
      RuleAction: "allow"
      RuleNumber: 100
  # Allows any ICMP connection into the subnet (Ex: For ping cmd to send data back in)
  MyNACLICMPInboundEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Egress: false
      CidrBlock: 0.0.0.0/0
      Icmp:
        Code: -1
        Type: -1
      NetworkAclId: !Ref MyNACL
      Protocol: 1
      RuleAction: "allow"
      RuleNumber: 200
  # Allows for instances to send responses back to ephemeral ports
  MyNACLEphemeralPortsOutboundEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Egress: true
      CidrBlock: 0.0.0.0/0
      NetworkAclId: !Ref MyNACL
      PortRange:
        From: 1024
        To: 65535
      Protocol: 6
      RuleAction: "allow"
      RuleNumber: 100
  # Allows any ICMP connection out of the subnet (Ex: FOr ping cmd to ping something external to VPC)
  MyNACLICMPOutboundEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Egress: true
      CidrBlock: 0.0.0.0/0
      Icmp: 
        Code: -1
        Type: -1
      NetworkAclId: !Ref MyNACL
      Protocol: 1
      RuleAction: "allow"
      RuleNumber: 200
  MyIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: igw-cfn-template

  MyIGWAssociatedWithVPC:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref MyIGW
      VpcId: !Ref MyVPC
  MyPublicSubnetAssociatedWithNACL:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref MyNACL
      SubnetId: !Ref MyPublicSubnet
  MyPublicSubnetAssociatedWithPublicRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MyPublicRouteTable
      SubnetId: !Ref MyPublicSubnet
  MyPrivateSubnetAssociatedWithPrivateRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MyPrivateRouteTable
      SubnetId: !Ref MyPrivateSubnet
  
  
  # Creates a route for anyone connecting to the VPC to be directed thru the IGW to the public subnet
  MyIGWRouteToPublicSubnet:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyIGW
      RouteTableId: !Ref MyPublicRouteTable

  # Specifies the outbound resolver endpoint (Uses AWS for outbound connections)
  #MyOutboundResolverEndpoint:
   # Type: AWS:::Route53Resolver::ResolverEndpoint
    #Properties:
     # Direction: OUTBOUND
      #IpAddresses:
       # - SubnetId: !Ref MyPublicSubnet


  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG limiting access to instances ONLY to port 22. SG made thru the cfn template.
      GroupName: launch-wizard-cfn
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      VpcId: !Ref MyVPC

  MyLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: !Ref LatestAMIId
        InstanceType: t2.micro
        NetworkInterfaces:
          - DeviceIndex: 0
            Groups: 
              - !Ref MySecurityGroup
      LaunchTemplateName: launch-template-cfn-template
      VersionDescription: "1.0"

  MyASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: asg-cfn-template
      LaunchTemplate: 
        LaunchTemplateId: !Ref MyLaunchTemplate
        Version: !GetAtt MyLaunchTemplate.LatestVersionNumber
      DesiredCapacity: 1
      MaxSize: 2
      MinSize: 0
      VPCZoneIdentifier:
        - !Ref MyPublicSubnet


# Conditions section
#Conditions:
 #   IsInstancesMade: !Equals [!Ref EC2InstanceCreation, true]
